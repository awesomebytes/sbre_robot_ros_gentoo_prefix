# Author: Sammy Pfeiffer <Sammy.Pfeiffer at student.uts.edu.au>
jobs:
  - job: "build_sbre_melodic_os_1"
    timeoutInMinutes: 0

    pool:
      vmImage: 'Ubuntu 16.04'

    variables:
      docker_image_name: sbre_os_melodic_32

    steps:
    - script: cd ros_base; docker build --network host -f Dockerfile.from_roogp -t $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) .
      displayName: 'docker build'
      # This means up to 6h
      timeoutInMinutes: 0
    - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
      displayName: 'docker login'
      # Even if it fails I want to push the image to DockerHub for inspection
    # The variables are set on the Build options on the web interface
    # # Try to tag the latest failed image we ran
    - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'create image to push to DockerHub'
      condition: failed()

    # Push it
    - script: docker push $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'push image to DockerHub'
      condition: always()
    # Tag as :latest too
    - script: docker tag $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'tag as latest'
    # Push as latest
    - script: docker push $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'push latest to DockerHub'

 
  - job: package_stage
    timeoutInMinutes: 0
    dependsOn: "build_sbre_melodic_os_1"

    pool:
      vmImage: 'Ubuntu 16.04'

    variables:
      docker_image_name: sbre_os_melodic_32_package_stage
      platform: x86
      rosdistro: ros-melodic

    steps:
    - script: df -h && df && cat /proc/meminfo && docker system prune -a -f && df -h && df
      displayName: 'Check disk space and RAM and docker cleanup'

    - script: cd ros_base; docker build -f Dockerfile.package_from_roogp -t $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) .
      displayName: 'docker build package_stage'
      # This means up to 6h
      timeoutInMinutes: 0
    # The variables are set on the Build options on the web interface
    - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
      displayName: 'docker login'
      # Even if it fails I want to push the image to DockerHub for inspection
    - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'create image to push to DockerHub'
      condition: failed()
    # Push it
    - script: docker push $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'push image to DockerHub'
      condition: always()
    # Tag as :latest too
    - script: docker tag $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'tag as latest'
    # Push as latest
    - script: docker push $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'push latest to DockerHub'

    # Create a temporal container to copy the sbre_os.tar.gz
    - script: |
        id=$(docker create $(DockerHub_user)/$(docker_image_name))
        docker cp $id:/tmp/sbre_os.tar.lzma $HOME
      displayName: 'Extract sbre_os.tar.lzma from Docker image'
    # Not really needed
    # - script: docker rm -v $id
    # Make a release
    - script: python -m pip install --upgrade pip setuptools wheel
      displayName: 'Install tools'
    - script: python -m pip install --user githubrelease
      displayName: 'Install tools 2'
    - script: |
        export DATE=$(date -I'minutes' | sed 's/+/plus/g'| sed 's/:/at/g')
        export RELEASE_TAG=release/${DATE}
        export RELEASE_FILE_NAME=sbre_os_$(rosdistro)-${PLATFORM}_${DATE}.tar.lzma
        export RELEASE_NAME="SBRE OS based on Gentoo Prefix and ROS Melodic"
        export BODY="Extract with: cat ${RELEASE_FILE_NAME}.part-* > ${RELEASE_FILE_NAME}; tar xvf sbre_os_*.tar.lzma; ./gentoo/startprefix"
        mv $HOME/sbre_os_.tar.lzma ${RELEASE_FILE_NAME}
        docker system prune -a -f
        split -b 1024MB -d ${RELEASE_FILE_NAME} ${RELEASE_FILE_NAME}.part-
        rm ${RELEASE_FILE_NAME}
        export PATH=$HOME/.local/bin:$PATH
        export PYTHONPATH=$HOME/.local/lib/python2.7/site-packages:$PYTHONPATH
        githubrelease --github-token $(GitHub_Token) release $(Build.Repository.Name) create "${RELEASE_TAG}" --publish --name "${RELEASE_NAME}" --body "${BODY}" "${RELEASE_FILE_NAME}.part-*"
      displayName: 'Create Release'
